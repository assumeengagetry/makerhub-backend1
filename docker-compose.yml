services:
  backend:
    build: .
    container_name: makerhub-backend
    ports:
      - "8000:8000"
    env_file: .env
    volumes:
      - ./app:/app/app  # 开发环境热重载
      - ./logs:/app/logs  # 日志持久化
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - makerhub-network

  mongo:
    image: mongo:5.0
    container_name: makerhub-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
      MONGO_INITDB_DATABASE: makerhub
    ports:
      - "27017:27017"
    volumes:
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - makerhub-network

  minio:
    image: minio/minio
    container_name: makerhub-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001  # 添加这行
    ports:
      - "9000:9000"  # API Port
      - "9001:9001"  # Console Port
    restart: unless-stopped
    command: server /data --console-address ":9001" --address ":9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - makerhub-network

networks:
  makerhub-network:
    driver: bridge


